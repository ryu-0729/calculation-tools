/* tslint:disable */
/* eslint-disable */
/**
 * Calculation Tools API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetTimeDifferenceResponse
 */
export interface GetTimeDifferenceResponse {
    /**
     * 残業時間(10進法表記)
     * @type {string}
     * @memberof GetTimeDifferenceResponse
     */
    'overTime': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TimeDifferenceHour = {
    _0: '0',
    _1: '1',
    _2: '2',
    _3: '3',
    _4: '4',
    _5: '5',
    _6: '6',
    _7: '7',
    _8: '8',
    _9: '9',
    _10: '10',
    _11: '11',
    _12: '12',
    _13: '13',
    _14: '14',
    _15: '15',
    _16: '16',
    _17: '17',
    _18: '18',
    _19: '19',
    _20: '20',
    _21: '21',
    _22: '22',
    _23: '23',
    _24: '24'
} as const;

export type TimeDifferenceHour = typeof TimeDifferenceHour[keyof typeof TimeDifferenceHour];


/**
 * 
 * @export
 * @enum {string}
 */

export const TimeDifferenceMinute = {
    _0: '0',
    _15: '15',
    _30: '30',
    _45: '45'
} as const;

export type TimeDifferenceMinute = typeof TimeDifferenceMinute[keyof typeof TimeDifferenceMinute];


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * TimeDifferenceApi - axios parameter creator
 * @export
 */
export const TimeDifferenceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Time Difference
         * @param {TimeDifferenceHour} startHour 
         * @param {TimeDifferenceMinute} startMinute 
         * @param {TimeDifferenceHour} endHour 
         * @param {TimeDifferenceMinute} endMinute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeDifferenceTimedifferenceGet: async (startHour: TimeDifferenceHour, startMinute: TimeDifferenceMinute, endHour: TimeDifferenceHour, endMinute: TimeDifferenceMinute, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startHour' is not null or undefined
            assertParamExists('getTimeDifferenceTimedifferenceGet', 'startHour', startHour)
            // verify required parameter 'startMinute' is not null or undefined
            assertParamExists('getTimeDifferenceTimedifferenceGet', 'startMinute', startMinute)
            // verify required parameter 'endHour' is not null or undefined
            assertParamExists('getTimeDifferenceTimedifferenceGet', 'endHour', endHour)
            // verify required parameter 'endMinute' is not null or undefined
            assertParamExists('getTimeDifferenceTimedifferenceGet', 'endMinute', endMinute)
            const localVarPath = `/timedifference/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startHour !== undefined) {
                localVarQueryParameter['startHour'] = startHour;
            }

            if (startMinute !== undefined) {
                localVarQueryParameter['startMinute'] = startMinute;
            }

            if (endHour !== undefined) {
                localVarQueryParameter['endHour'] = endHour;
            }

            if (endMinute !== undefined) {
                localVarQueryParameter['endMinute'] = endMinute;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimeDifferenceApi - functional programming interface
 * @export
 */
export const TimeDifferenceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimeDifferenceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Time Difference
         * @param {TimeDifferenceHour} startHour 
         * @param {TimeDifferenceMinute} startMinute 
         * @param {TimeDifferenceHour} endHour 
         * @param {TimeDifferenceMinute} endMinute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTimeDifferenceTimedifferenceGet(startHour: TimeDifferenceHour, startMinute: TimeDifferenceMinute, endHour: TimeDifferenceHour, endMinute: TimeDifferenceMinute, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTimeDifferenceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTimeDifferenceTimedifferenceGet(startHour, startMinute, endHour, endMinute, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['TimeDifferenceApi.getTimeDifferenceTimedifferenceGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * TimeDifferenceApi - factory interface
 * @export
 */
export const TimeDifferenceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimeDifferenceApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Time Difference
         * @param {TimeDifferenceHour} startHour 
         * @param {TimeDifferenceMinute} startMinute 
         * @param {TimeDifferenceHour} endHour 
         * @param {TimeDifferenceMinute} endMinute 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTimeDifferenceTimedifferenceGet(startHour: TimeDifferenceHour, startMinute: TimeDifferenceMinute, endHour: TimeDifferenceHour, endMinute: TimeDifferenceMinute, options?: any): AxiosPromise<GetTimeDifferenceResponse> {
            return localVarFp.getTimeDifferenceTimedifferenceGet(startHour, startMinute, endHour, endMinute, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimeDifferenceApi - object-oriented interface
 * @export
 * @class TimeDifferenceApi
 * @extends {BaseAPI}
 */
export class TimeDifferenceApi extends BaseAPI {
    /**
     * 
     * @summary Get Time Difference
     * @param {TimeDifferenceHour} startHour 
     * @param {TimeDifferenceMinute} startMinute 
     * @param {TimeDifferenceHour} endHour 
     * @param {TimeDifferenceMinute} endMinute 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimeDifferenceApi
     */
    public getTimeDifferenceTimedifferenceGet(startHour: TimeDifferenceHour, startMinute: TimeDifferenceMinute, endHour: TimeDifferenceHour, endMinute: TimeDifferenceMinute, options?: AxiosRequestConfig) {
        return TimeDifferenceApiFp(this.configuration).getTimeDifferenceTimedifferenceGet(startHour, startMinute, endHour, endMinute, options).then((request) => request(this.axios, this.basePath));
    }
}



